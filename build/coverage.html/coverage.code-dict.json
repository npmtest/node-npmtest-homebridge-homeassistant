{"/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/test.js":"/* istanbul instrument in package npmtest_homebridge_homeassistant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/lib.npmtest_homebridge_homeassistant.js":"/* istanbul instrument in package npmtest_homebridge_homeassistant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_homeassistant = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_homeassistant = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-homeassistant && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_homeassistant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_homeassistant\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_homeassistant.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_homebridge_homeassistant.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_homeassistant.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_homebridge_homeassistant.__dirname +\n                    '/lib.npmtest_homebridge_homeassistant.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/index.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nconst url = require('url');\nconst request = require('request');\nconst EventSource = require('eventsource');\n\nconst communicationError = new Error('Can not communicate with Home Assistant.');\n\nlet HomeAssistantBinarySensorFactory;\nlet HomeAssistantCoverFactory;\nlet HomeAssistantFan;\nlet HomeAssistantLight;\nlet HomeAssistantLock;\nlet HomeAssistantMediaPlayer;\nlet HomeAssistantSensorFactory;\nlet HomeAssistantSwitch;\nlet HomeAssistantDeviceTrackerFactory;\n\nfunction HomeAssistantPlatform(log, config, api) {\n  // auth info\n  this.host = config.host;\n  this.password = config.password;\n  this.supportedTypes = config.supported_types || ['binary_sensor', 'cover', 'device_tracker', 'fan', 'input_boolean', 'light', 'lock', 'media_player', 'scene', 'sensor', 'switch'];\n  this.foundAccessories = [];\n  this.logging = config.logging !== undefined ? config.logging : true;\n\n  this.log = log;\n\n  if (api) {\n    // Save the API object as plugin needs to register new accessory via this object.\n    this.api = api;\n  }\n\n  const es = new EventSource(`${config.host}/api/stream?api_password=${encodeURIComponent(this.password)}`);\n  es.addEventListener('message', (e) => {\n    if (this.logging) {\n      this.log(`Received event: ${e.data}`);\n    }\n    if (e.data === 'ping') {\n      return;\n    }\n\n    const data = JSON.parse(e.data);\n    if (data.event_type !== 'state_changed') {\n      return;\n    }\n\n    const numAccessories = this.foundAccessories.length;\n    for (let i = 0; i < numAccessories; i++) {\n      const accessory = this.foundAccessories[i];\n\n      if (accessory.entity_id === data.data.entity_id && accessory.onEvent) {\n        accessory.onEvent(data.data.old_state, data.data.new_state);\n      }\n    }\n  });\n}\n\nHomeAssistantPlatform.prototype = {\n  request(method, path, options, callback) {\n    const requestURL = `${this.host}/api${path}`;\n    /* eslint-disable no-param-reassign */\n    options = options || {};\n    options.query = options.query || {};\n    /* eslint-enable no-param-reassign */\n\n    const reqOpts = {\n      url: url.parse(requestURL),\n      method: method || 'GET',\n      qs: options.query,\n      body: JSON.stringify(options.body),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'x-ha-access': this.password,\n      },\n    };\n\n    request(reqOpts, (error, response, body) => {\n      if (error) {\n        callback(error, response);\n        return;\n      }\n\n      if (response.statusCode === 401) {\n        callback(new Error('You are not authenticated'), response);\n        return;\n      }\n\n      callback(error, response, JSON.parse(body));\n    });\n  },\n  fetchState(entityID, callback) {\n    this.request('GET', `/states/${entityID}`, {}, (error, response, data) => {\n      if (error) {\n        callback(null);\n      } else {\n        callback(data);\n      }\n    });\n  },\n  callService(domain, service, serviceData, callback) {\n    const options = {};\n    options.body = serviceData;\n\n    this.request('POST', `/services/${domain}/${service}`, options, (error, response, data) => {\n      if (error) {\n        callback(null);\n      } else {\n        callback(data);\n      }\n    });\n  },\n  accessories(callback) {\n    this.log('Fetching HomeAssistant devices.');\n\n    const that = this;\n\n    this.request('GET', '/states', {}, (error, response, data) => {\n      if (error) {\n        that.log(`Failed getting devices: ${error}. Retrying...`);\n        setTimeout(() => { that.accessories(callback); }, 5000);\n        return;\n      }\n\n      for (let i = 0; i < data.length; i++) {\n        const entity = data[i];\n        const entityType = entity.entity_id.split('.')[0];\n\n        /* eslint-disable no-continue */\n        // ignore devices that are not in the list of supported types\n        if (that.supportedTypes.indexOf(entityType) === -1) {\n          continue;\n        }\n\n        // ignore hidden devices\n        if (entity.attributes && entity.attributes.hidden) {\n          continue;\n        }\n\n        // ignore homebridge hidden devices\n        if (entity.attributes && entity.attributes.homebridge_hidden) {\n          continue;\n        }\n        /* eslint-enable no-continue */\n\n        // support providing custom names\n        if (entity.attributes && entity.attributes.homebridge_name) {\n          entity.attributes.friendly_name = entity.attributes.homebridge_name;\n        }\n\n        let accessory = null;\n\n        if (entityType === 'light') {\n          accessory = new HomeAssistantLight(that.log, entity, that);\n        } else if (entityType === 'switch') {\n          accessory = new HomeAssistantSwitch(that.log, entity, that);\n        } else if (entityType === 'lock') {\n          accessory = new HomeAssistantLock(that.log, entity, that);\n        } else if (entityType === 'garage_door') {\n          that.log.error('Garage_doors are no longer supported by homebridge-homeassistant. Please upgrade to a newer version of Home Assistant to continue using this entity (with the new cover component).');\n        } else if (entityType === 'scene') {\n          accessory = new HomeAssistantSwitch(that.log, entity, that, 'scene');\n        } else if (entityType === 'rollershutter') {\n          that.log.error('Rollershutters are no longer supported by homebridge-homeassistant. Please upgrade to a newer version of Home Assistant to continue using this entity (with the new cover component).');\n        } else if (entityType === 'input_boolean') {\n          accessory = new HomeAssistantSwitch(that.log, entity, that, 'input_boolean');\n        } else if (entityType === 'fan') {\n          accessory = new HomeAssistantFan(that.log, entity, that);\n        } else if (entityType === 'cover') {\n          accessory = HomeAssistantCoverFactory(that.log, entity, that);\n        } else if (entityType === 'sensor') {\n          accessory = HomeAssistantSensorFactory(that.log, entity, that);\n        } else if (entityType === 'device_tracker') {\n          accessory = HomeAssistantDeviceTrackerFactory(that.log, entity, that);\n        } else if (entityType === 'media_player' && entity.attributes && entity.attributes.supported_features) {\n          accessory = new HomeAssistantMediaPlayer(that.log, entity, that);\n        } else if (entityType === 'binary_sensor' && entity.attributes && entity.attributes.device_class) {\n          accessory = HomeAssistantBinarySensorFactory(that.log, entity, that);\n        }\n\n        if (accessory) {\n          that.foundAccessories.push(accessory);\n        }\n      }\n\n      callback(that.foundAccessories);\n    });\n  },\n};\n\nfunction HomebridgeHomeAssistant(homebridge) {\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n\n  /* eslint-disable global-require */\n  HomeAssistantLight = require('./accessories/light')(Service, Characteristic, communicationError);\n  HomeAssistantSwitch = require('./accessories/switch')(Service, Characteristic, communicationError);\n  HomeAssistantLock = require('./accessories/lock')(Service, Characteristic, communicationError);\n  HomeAssistantMediaPlayer = require('./accessories/media_player')(Service, Characteristic, communicationError);\n  HomeAssistantFan = require('./accessories/fan')(Service, Characteristic, communicationError);\n  HomeAssistantCoverFactory = require('./accessories/cover')(Service, Characteristic, communicationError);\n  HomeAssistantSensorFactory = require('./accessories/sensor')(Service, Characteristic, communicationError);\n  HomeAssistantBinarySensorFactory = require('./accessories/binary_sensor')(Service, Characteristic, communicationError);\n  HomeAssistantDeviceTrackerFactory = require('./accessories/device_tracker')(Service, Characteristic, communicationError);\n  /* eslint-enable global-require */\n\n  homebridge.registerPlatform('homebridge-homeassistant', 'HomeAssistant', HomeAssistantPlatform, false);\n}\n\nmodule.exports = HomebridgeHomeAssistant;\n\nmodule.exports.platform = HomeAssistantPlatform;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/binary_sensor.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nfunction toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n\nclass HomeAssistantBinarySensor {\n  constructor(log, data, client, service, characteristic, onValue, offValue) {\n    // device info\n    this.data = data;\n    this.entity_id = data.entity_id;\n    this.uuid_base = data.entity_id;\n    if (data.attributes && data.attributes.friendly_name) {\n      this.name = data.attributes.friendly_name;\n    } else {\n      this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n    }\n\n    this.entity_type = data.entity_id.split('.')[0];\n\n    this.client = client;\n    this.log = log;\n\n    this.service = service;\n    this.characteristic = characteristic;\n    this.onValue = onValue;\n    this.offValue = offValue;\n  }\n\n  onEvent(oldState, newState) {\n    this.sensorService.getCharacteristic(this.characteristic)\n        .setValue(newState.state === 'on' ? this.onValue : this.offValue, null, 'internal');\n  }\n  identify(callback) {\n    this.log(`identifying: ${this.name}`);\n    callback();\n  }\n  getState(callback) {\n    this.log(`fetching state for: ${this.name}`);\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        callback(null, data.state === 'on' ? this.onValue : this.offValue);\n      } else {\n        callback(communicationError);\n      }\n    });\n  }\n  getServices() {\n    this.sensorService = new this.service(); // eslint-disable-line new-cap\n    this.sensorService\n        .getCharacteristic(this.characteristic)\n        .on('get', this.getState.bind(this));\n\n    const informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, `${toTitleCase(this.data.attributes.device_class)} Binary Sensor`)\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    return [informationService, this.sensorService];\n  }\n}\n\nfunction HomeAssistantBinarySensorFactory(log, data, client) {\n  if (!(data.attributes && data.attributes.device_class)) {\n    return null;\n  }\n  switch (data.attributes.device_class) {\n    case 'moisture':\n      return new HomeAssistantBinarySensor(log, data, client,\n                                           Service.LeakSensor,\n                                           Characteristic.LeakDetected,\n                                           Characteristic.LeakDetected.LEAK_DETECTED,\n                                           Characteristic.LeakDetected.LEAK_NOT_DETECTED);\n    case 'motion':\n      return new HomeAssistantBinarySensor(log, data, client,\n                                           Service.MotionSensor,\n                                           Characteristic.MotionDetected,\n                                           true,\n                                           false);\n    case 'occupancy':\n      return new HomeAssistantBinarySensor(log, data, client,\n                                           Service.OccupancySensor,\n                                           Characteristic.OccupancyDetected,\n                                           Characteristic.OccupancyDetected.OCCUPANCY_DETECTED,\n                                           Characteristic.OccupancyDetected.OCCUPANCY_NOT_DETECTED);\n    case 'opening':\n      return new HomeAssistantBinarySensor(log, data, client,\n                                           Service.ContactSensor,\n                                           Characteristic.ContactSensorState,\n                                           Characteristic.ContactSensorState.CONTACT_NOT_DETECTED,\n                                           Characteristic.ContactSensorState.CONTACT_DETECTED);\n    case 'smoke':\n      return new HomeAssistantBinarySensor(log, data, client,\n                                           Service.SmokeSensor,\n                                           Characteristic.SmokeDetected,\n                                           Characteristic.SmokeDetected.SMOKE_DETECTED,\n                                           Characteristic.SmokeDetected.SMOKE_NOT_DETECTED);\n    default:\n      log.error(`'${data.entity_id}' has a device_class of '${data.attributes.device_class}' which is not supported by ` +\n                'homebridge-homeassistant. Supported classes are \\'moisture\\', \\'motion\\', \\'occupancy\\', \\'opening\\' and \\'smoke\\'. ' +\n                'See the README.md for more information.');\n      return null;\n  }\n}\n\nfunction HomeAssistantBinarySensorPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantBinarySensorFactory;\n}\n\nmodule.exports = HomeAssistantBinarySensorPlatform;\nmodule.exports.HomeAssistantBinarySensorFactory = HomeAssistantBinarySensorFactory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/cover.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nclass HomeAssistantCover {\n  constructor(log, data, client) {\n    this.client = client;\n    this.log = log;\n    // device info\n    this.domain = 'cover';\n    this.data = data;\n    this.entity_id = data.entity_id;\n    this.uuid_base = data.entity_id;\n    if (data.attributes && data.attributes.friendly_name) {\n      this.name = data.attributes.friendly_name;\n    } else {\n      this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n    }\n  }\n\n  onEvent(oldState, newState) {\n    const state = this.transformData(newState);\n\n    this.service.getCharacteristic(this.stateCharacteristic)\n        .setValue(state, null, 'internal');\n    this.service.getCharacteristic(this.targetCharacteristic)\n        .setValue(state, null, 'internal');\n  }\n\n  getState(callback) {\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        callback(null, this.transformData(data));\n      } else {\n        callback(communicationError);\n      }\n    });\n  }\n\n  getServices() {\n    const informationService = new Service.AccessoryInformation();\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id)\n          .setCharacteristic(Characteristic.Model, this.model);\n\n    this.service\n        .getCharacteristic(this.stateCharacteristic)\n        .on('get', this.getState.bind(this));\n\n    this.service\n        .getCharacteristic(this.targetCharacteristic)\n        .on('get', this.getState.bind(this))\n        .on('set', this.setTargetState.bind(this));\n\n    return [informationService, this.service];\n  }\n\n  doChangeState(service, callback) {\n    const serviceData = {\n      entity_id: this.entity_id,\n    };\n\n    this.log(`Calling service ${service} on ${this.name}`);\n\n    this.client.callService(this.domain, service, serviceData, (data) => {\n      if (data) {\n        callback();\n      } else {\n        callback(communicationError);\n      }\n    });\n  }\n}\n\nclass HomeAssistantGarageDoor extends HomeAssistantCover {\n  constructor(log, data, client) {\n    super(log, data, client);\n    this.model = 'Garage Door';\n    this.service = new Service.GarageDoorOpener();\n    this.stateCharacteristic = Characteristic.CurrentDoorState;\n    this.targetCharacteristic = Characteristic.TargetDoorState;\n  }\n\n  transformData(data) {\n    return data.state === 'closed' ? this.stateCharacteristic.CLOSED : this.stateCharacteristic.OPEN;\n  }\n\n  setTargetState(targetState, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    this.doChangeState(targetState === Characteristic.TargetDoorState.CLOSED ? 'close_cover' : 'open_cover', callback);\n  }\n}\n\nclass HomeAssistantRollershutter extends HomeAssistantCover {\n  constructor(log, data, client) {\n    super(log, data, client);\n    this.model = 'Rollershutter';\n    this.service = new Service.WindowCovering();\n    this.stateCharacteristic = Characteristic.CurrentPosition;\n    this.targetCharacteristic = Characteristic.TargetPosition;\n  }\n\n  transformData(data) {\n    return (data && data.attributes) ? data.attributes.current_position : null;\n  }\n\n  setTargetState(position, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const payload = {\n      entity_id: this.entity_id,\n      position,\n    };\n\n    this.log(`Setting the state of the ${this.name} to ${payload.position}`);\n\n    this.client.callService(this.domain, 'set_cover_position', payload, (data) => {\n      if (data) {\n        callback();\n      } else {\n        callback(communicationError);\n      }\n    });\n  }\n}\n\nclass HomeAssistantRollershutterBinary extends HomeAssistantRollershutter {\n  transformData(data) {\n    return (data && data.state) ? ((data.state === 'open') * 100) : null;\n  }\n\n  setTargetState(position, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    if (!(position === 100 || position === 0)) {\n      this.log('Cannot set this cover to positions other than 0 or 100');\n      callback(communicationError); // TODO\n    } else {\n      this.doChangeState(position === '100' ? 'open_cover' : 'close_cover', callback);\n    }\n  }\n}\n\nfunction HomeAssistantCoverFactory(log, data, client) {\n  if (!data.attributes) {\n    return null;\n  }\n\n  if (data.attributes.homebridge_cover_type === 'garage_door') {\n    return new HomeAssistantGarageDoor(log, data, client);\n  } else if (data.attributes.homebridge_cover_type === 'rollershutter') {\n    if (data.attributes.current_position !== undefined) {\n      return new HomeAssistantRollershutter(log, data, client);\n    }\n    return new HomeAssistantRollershutterBinary(log, data, client);\n  }\n  log.error(`'${data.entity_id}' is a cover but does not have a 'homebridge_cover_type' property set. ` +\n            'You must set it to either \\'rollershutter\\' or \\'garage_door\\' in the customize section ' +\n            'of your Home Assistant configuration. It will not be available to Homebridge until you do. ' +\n            'See the README.md for more information. ' +\n            'The attributes that were found are:', JSON.stringify(data.attributes));\n}\n\nfunction HomeAssistantCoverPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantCoverFactory;\n}\n\nmodule.exports = HomeAssistantCoverPlatform;\n\nmodule.exports.HomeAssistantCoverFactory = HomeAssistantCoverFactory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/device_tracker.js":"'use strict';\n\nvar Service;\nvar Characteristic;\nvar communicationError;\n\nclass HomeAssistantDeviceTracker {\n  constructor(log, data, client, service, characteristic, onValue, offValue) {\n        // device info\n    this.data = data;\n    this.entity_id = data.entity_id;\n    this.uuid_base = data.entity_id;\n    if (data.attributes && data.attributes.friendly_name) {\n      this.name = data.attributes.friendly_name;\n    } else {\n      this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n    }\n\n    this.entity_type = data.entity_id.split('.')[0];\n\n    this.client = client;\n    this.log = log;\n\n    this.service = service;\n    this.characteristic = characteristic;\n    this.onValue = onValue;\n    this.offValue = offValue;\n  }\n\n  onEvent(oldState, newState) {\n    this.sensorService.getCharacteristic(this.characteristic)\n          .setValue(newState.state === 'home' ? this.onValue : this.offValue, null, 'internal');\n  }\n  identify(callback) {\n    this.log('identifying: ' + this.name);\n    callback();\n  }\n  getState(callback) {\n    this.log('fetching state for: ' + this.name);\n    this.client.fetchState(this.entity_id, function (data) {\n      if (data) {\n        callback(null, data.state === 'home' ? this.onValue : this.offValue);\n      } else {\n        callback(communicationError);\n      }\n    }.bind(this));\n  }\n  getServices() {\n    this.sensorService = new this.service();\n    this.sensorService\n          .getCharacteristic(this.characteristic)\n          .on('get', this.getState.bind(this));\n\n    var informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, 'Device Tracker')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    return [informationService, this.sensorService];\n  }\n}\n\nfunction HomeAssistantDeviceTrackerFactory(log, data, client) {\n  if (!(data.attributes)) {\n    return null;\n  }\n  return new HomeAssistantDeviceTracker(log, data, client,\n      Service.OccupancySensor,\n      Characteristic.OccupancyDetected,\n      Characteristic.OccupancyDetected.OCCUPANCY_DETECTED,\n      Characteristic.OccupancyDetected.OCCUPANCY_NOT_DETECTED);\n}\n\nfunction HomeAssistantDeviceTrackerFactoryPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantDeviceTrackerFactory;\n}\n\nmodule.exports = HomeAssistantDeviceTrackerFactoryPlatform;\nmodule.exports.HomeAssistantDeviceTrackerFactory = HomeAssistantDeviceTrackerFactory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/fan.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nfunction HomeAssistantFan(log, data, client) {\n  // device info\n  this.domain = 'fan';\n  this.data = data;\n  this.entity_id = data.entity_id;\n  this.uuid_base = data.entity_id;\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name;\n  } else {\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n  }\n\n  this.client = client;\n  this.log = log;\n}\n\nHomeAssistantFan.prototype = {\n  onEvent(oldState, newState) {\n    this.fanService.getCharacteristic(Characteristic.On)\n                   .setValue(newState.state === 'on', null, 'internal');\n  },\n  getPowerState(callback) {\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        const powerState = data.state === 'on';\n        callback(null, powerState);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setPowerState(powerOn, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    if (powerOn) {\n      this.log(`Setting power state on the '${this.name}' to on`);\n\n      this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to on`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    } else {\n      this.log(`Setting power state on the '${this.name}' to off`);\n\n      this.client.callService(this.domain, 'turn_off', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to off`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    }\n  },\n  getRotationSpeed(callback) {\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        if (data.state === 'off') {\n          callback(null, 0);\n        } else {\n          switch (data.attributes.speed) {\n            case 'low':\n              callback(null, 25);\n              break;\n            case 'medium':\n              callback(null, 50);\n              break;\n            case 'high':\n              callback(null, 100);\n              break;\n            default:\n              callback(null, 0);\n          }\n        }\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setRotationSpeed(speed, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    if (speed <= 25) {\n      serviceData.speed = 'low';\n    } else if (speed <= 75) {\n      serviceData.speed = 'med';\n    } else if (speed <= 100) {\n      serviceData.speed = 'high';\n    }\n\n    this.log(`Setting speed on the '${this.name}' to ${serviceData.speed}`);\n\n    this.client.callService(this.domain, 'set_speed', serviceData, (data) => {\n      if (data) {\n        that.log(`Successfully set power state on the '${that.name}' to on`);\n        callback();\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  getServices() {\n    this.fanService = new Service.Fan();\n    const informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, 'Fan')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    this.fanService\n        .getCharacteristic(Characteristic.On)\n        .on('get', this.getPowerState.bind(this))\n        .on('set', this.setPowerState.bind(this));\n\n    this.fanService\n        .getCharacteristic(Characteristic.RotationSpeed)\n        .on('get', this.getRotationSpeed.bind(this))\n        .on('set', this.setRotationSpeed.bind(this));\n\n    return [informationService, this.fanService];\n  },\n\n};\n\nfunction HomeAssistantFanPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantFan;\n}\n\nmodule.exports = HomeAssistantFanPlatform;\nmodule.exports.HomeAssistantFan = HomeAssistantFan;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/light.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\n/* eslint-disable */\nconst LightUtil = {\n    hsvToRgb(h, s, v) {\n        let r;\n        let g;\n        let b;\n        let i;\n        let f;\n        let p;\n        let q;\n        let t;\n        if (arguments.length === 1) {\n            s = h.s, v = h.v, h = h.h;\n        }\n        i = Math.floor(h * 6);\n        f = h * 6 - i;\n        p = v * (1 - s);\n        q = v * (1 - f * s);\n        t = v * (1 - (1 - f) * s);\n        switch (i % 6) {\n        case 0: r = v, g = t, b = p; break;\n        case 1: r = q, g = v, b = p; break;\n        case 2: r = p, g = v, b = t; break;\n        case 3: r = p, g = q, b = v; break;\n        case 4: r = t, g = p, b = v; break;\n        case 5: r = v, g = p, b = q; break;\n        }\n        return {\n            r: Math.round(r * 255),\n            g: Math.round(g * 255),\n            b: Math.round(b * 255),\n        };\n    },\n    rgbToHsv(r, g, b) {\n        if (arguments.length === 1) {\n            g = r.g, b = r.b, r = r.r;\n        }\n        let max = Math.max(r, g, b),\n            min = Math.min(r, g, b),\n            d = max - min,\n            h,\n            s = (max === 0 ? 0 : d / max),\n            v = max / 255;\n\n        switch (max) {\n        case min: h = 0; break;\n        case r: h = (g - b) + d * (g < b ? 6 : 0); h /= 6 * d; break;\n        case g: h = (b - r) + d * 2; h /= 6 * d; break;\n        case b: h = (r - g) + d * 4; h /= 6 * d; break;\n        }\n\n        return {\n            h,\n            s,\n            v,\n        };\n    },\n    rgbToCie(red, green, blue) {\n        // Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n        red = (red > 0.04045) ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : (red / 12.92);\n        green = (green > 0.04045) ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : (green / 12.92);\n        blue = (blue > 0.04045) ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : (blue / 12.92);\n\n        // RGB values to XYZ using the Wide RGB D65 conversion formula\n        const X = red * 0.664511 + green * 0.154324 + blue * 0.162028;\n        const Y = red * 0.283881 + green * 0.668433 + blue * 0.047685;\n        const Z = red * 0.000088 + green * 0.072310 + blue * 0.986039;\n\n        // Calculate the xy values from the XYZ values\n        let x = (X / (X + Y + Z)).toFixed(4);\n        let y = (Y / (X + Y + Z)).toFixed(4);\n\n        if (isNaN(x)) {\n            x = 0;\n        }\n\n        if (isNaN(y)) { y = 0; }\n\n        return [x, y];\n    },\n};\n/* eslint-enable */\n\nfunction HomeAssistantLight(log, data, client) {\n  // device info\n  this.domain = 'light';\n  this.data = data;\n  this.entity_id = data.entity_id;\n  this.uuid_base = data.entity_id;\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name;\n  } else {\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n  }\n\n  this.client = client;\n  this.log = log;\n}\n\nHomeAssistantLight.prototype = {\n  features: Object.freeze({\n    BRIGHTNESS: 1,\n    COLOR_TEMP: 2,\n    EFFECT: 4,\n    FLASH: 8,\n    RGB_COLOR: 16,\n    TRANSITION: 32,\n    XY_COLOR: 64,\n  }),\n  is_supported(feature) {\n    // If the supported_features attribute doesn't exist, assume not supported\n    if (this.data.attributes.supported_features === undefined) {\n      return false;\n    }\n\n    return (this.data.attributes.supported_features & feature) > 0;\n  },\n  onEvent(oldState, newState) {\n    this.lightbulbService.getCharacteristic(Characteristic.On)\n        .setValue(newState.state === 'on', null, 'internal');\n    if (this.is_supported(this.features.BRIGHTNESS)) {\n      const brightness = Math.round(((newState.attributes.brightness || 0) / 255) * 100);\n\n      this.lightbulbService.getCharacteristic(Characteristic.Brightness)\n          .setValue(brightness, null, 'internal');\n\n      this.data.attributes.brightness = newState.attributes.brightness;\n    }\n\n    if (this.is_supported(this.features.RGB_COLOR) &&\n            newState.attributes.rgb_color !== undefined) {\n      const rgbColor = newState.attributes.rgb_color;\n      const hsv = LightUtil.rgbToHsv(rgbColor[0], rgbColor[1], rgbColor[2]);\n      const hue = hsv.h * 360;\n      const saturation = hsv.s * 100;\n\n      this.lightbulbService.getCharacteristic(Characteristic.Hue)\n          .setValue(hue, null, 'internal');\n      this.lightbulbService.getCharacteristic(Characteristic.Saturation)\n          .setValue(saturation, null, 'internal');\n\n      this.data.attributes.hue = hue;\n      this.data.attributes.saturation = saturation;\n    }\n  },\n  identify(callback) {\n    this.log(`identifying: ${this.name}`);\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n    serviceData.flash = 'short';\n\n    this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n      if (data) {\n        that.log(`Successfully identified '${that.name}'`);\n      }\n      callback();\n    });\n  },\n  getPowerState(callback) {\n    this.log(`fetching power state for: ${this.name}`);\n\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        const powerState = data.state === 'on';\n        callback(null, powerState);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  getBrightness(callback) {\n    this.log(`fetching brightness for: ${this.name}`);\n\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data && data.attributes) {\n        const brightness = ((data.attributes.brightness || 0) / 255) * 100;\n        callback(null, brightness);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  getHue(callback) {\n    const that = this;\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data && data.attributes && data.attributes.rgb_color) {\n        const rgb = data.attributes.rgb_color;\n        const hsv = LightUtil.rgbToHsv(rgb[0], rgb[1], rgb[2]);\n\n        const hue = hsv.h * 360;\n        that.data.attributes.hue = hue;\n\n        callback(null, hue);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  getSaturation(callback) {\n    const that = this;\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data && data.attributes && data.attributes.rgb_color) {\n        const rgb = data.attributes.rgb_color;\n        const hsv = LightUtil.rgbToHsv(rgb[0], rgb[1], rgb[2]);\n\n        const saturation = hsv.s * 100;\n        that.data.attributes.saturation = saturation;\n\n        callback(null, saturation);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setPowerState(powerOn, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    if (powerOn) {\n      this.log(`Setting power state on the '${this.name}' to on`);\n\n      this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to on`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    } else {\n      this.log(`Setting power state on the '${this.name}' to off`);\n\n      this.client.callService(this.domain, 'turn_off', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to off`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    }\n  },\n  setBrightness(level, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    serviceData.brightness = 255 * (level / 100.0);\n\n    // To make sure setBrightness is done after the setPowerState\n    setTimeout(() => {\n      this.log(`Setting brightness on the '${this.name}' to ${level}`);\n      this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set brightness on the '${that.name}' to ${level}`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    }, 800);\n  },\n  setHue(level, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n    this.data.attributes.hue = level;\n\n    const rgb = LightUtil.hsvToRgb(\n            (this.data.attributes.hue || 0) / 360,\n            (this.data.attributes.saturation || 0) / 100,\n            (this.data.attributes.brightness || 0) / 255);\n    if (this.data.attributes.saturation !== undefined) {\n      if (this.is_supported(this.features.XY_COLOR)) {\n        serviceData.xy_color = LightUtil.rgbToCie(rgb.r, rgb.g, rgb.b);\n      } else {\n        serviceData.rgb_color = [rgb.r, rgb.g, rgb.b];\n      }\n    }\n\n    this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n      if (data) {\n        that.log(`Successfully set hue on the '${that.name}' to ${level}`);\n        if (that.is_supported(that.features.XY_COLOR)) {\n          that.log(`Successfully set xy on the '${that.name}' to ${serviceData.xy_color}`);\n        } else {\n          that.log(`Successfully set rgb on the '${that.name}' to ${serviceData.rgb_color}`);\n        }\n        callback();\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setSaturation(level, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    this.data.attributes.saturation = level;\n\n    const rgb = LightUtil.hsvToRgb(\n            (this.data.attributes.hue || 0) / 360,\n            (this.data.attributes.saturation || 0) / 100,\n            (this.data.attributes.brightness || 0) / 255);\n\n    if (this.data.attributes.hue !== undefined) {\n      if (this.is_supported(this.features.XY_COLOR)) {\n        serviceData.xy_color = LightUtil.rgbToCie(rgb.r, rgb.g, rgb.b);\n      } else {\n        serviceData.rgb_color = [rgb.r, rgb.g, rgb.b];\n      }\n    }\n\n    this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n      if (data) {\n        that.log(`Successfully set saturation on the '${that.name}' to ${level}`);\n        if (that.is_supported(that.features.XY_COLOR)) {\n          that.log(`Successfully set xy on the '${that.name}' to ${serviceData.xy_color}`);\n        } else {\n          that.log(`Successfully set rgb on the '${that.name}' to ${serviceData.rgb_color}`);\n        }\n        callback();\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  getServices() {\n    this.lightbulbService = new Service.Lightbulb();\n    const informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, 'Light')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    this.lightbulbService\n          .getCharacteristic(Characteristic.On)\n          .on('get', this.getPowerState.bind(this))\n          .on('set', this.setPowerState.bind(this));\n\n    if (this.is_supported(this.features.BRIGHTNESS)) {\n      this.lightbulbService\n              .addCharacteristic(Characteristic.Brightness)\n              .on('get', this.getBrightness.bind(this))\n              .on('set', this.setBrightness.bind(this));\n    }\n\n    if (this.is_supported(this.features.RGB_COLOR)) {\n      this.lightbulbService\n              .addCharacteristic(Characteristic.Hue)\n              .on('get', this.getHue.bind(this))\n              .on('set', this.setHue.bind(this));\n\n      this.lightbulbService\n              .addCharacteristic(Characteristic.Saturation)\n              .on('get', this.getSaturation.bind(this))\n              .on('set', this.setSaturation.bind(this));\n    }\n\n    return [informationService, this.lightbulbService];\n  },\n\n};\n\nfunction HomeAssistantLightPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantLight;\n}\n\nmodule.exports = HomeAssistantLightPlatform;\nmodule.exports.HomeAssistantLight = HomeAssistantLight;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/lock.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nfunction HomeAssistantLock(log, data, client) {\n  // device info\n  this.domain = 'lock';\n  this.data = data;\n  this.entity_id = data.entity_id;\n  this.uuid_base = data.entity_id;\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name;\n  } else {\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n  }\n\n  this.client = client;\n  this.log = log;\n}\n\nHomeAssistantLock.prototype = {\n  onEvent(oldState, newState) {\n    const lockState = newState.state === 'unlocked' ? 0 : 1;\n    this.lockService.getCharacteristic(Characteristic.LockCurrentState)\n        .setValue(lockState, null, 'internal');\n    this.lockService.getCharacteristic(Characteristic.LockTargetState)\n        .setValue(lockState, null, 'internal');\n  },\n  getLockState(callback) {\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        const lockState = data.state === 'locked';\n        callback(null, lockState);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setLockState(lockOn, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    if (lockOn) {\n      this.log(`Setting lock state on the '${this.name}' to locked`);\n\n      this.client.callService(this.domain, 'lock', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set lock state on the '${that.name}' to locked`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    } else {\n      this.log(`Setting lock state on the '${this.name}' to unlocked`);\n\n      this.client.callService(this.domain, 'unlock', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set lock state on the '${that.name}' to unlocked`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    }\n  },\n  getServices() {\n    this.lockService = new Service.LockMechanism();\n    const informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, 'Lock')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    this.lockService\n        .getCharacteristic(Characteristic.LockCurrentState)\n        .on('get', this.getLockState.bind(this));\n\n    this.lockService\n        .getCharacteristic(Characteristic.LockTargetState)\n        .on('get', this.getLockState.bind(this))\n        .on('set', this.setLockState.bind(this));\n\n    return [informationService, this.lockService];\n  },\n\n};\n\nfunction HomeAssistantLockPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantLock;\n}\n\nmodule.exports = HomeAssistantLockPlatform;\nmodule.exports.HomeAssistantLock = HomeAssistantLock;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/media_player.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nfunction HomeAssistantMediaPlayer(log, data, client) {\n  /* eslint-disable no-unused-vars */\n  const SUPPORT_PAUSE = 1;\n  const SUPPORT_SEEK = 2;\n  const SUPPORT_VOLUME_SET = 4;\n  const SUPPORT_VOLUME_MUTE = 8;\n  const SUPPORT_PREVIOUS_TRACK = 16;\n  const SUPPORT_NEXT_TRACK = 32;\n  const SUPPORT_YOUTUBE = 64;\n  const SUPPORT_TURN_ON = 128;\n  const SUPPORT_TURN_OFF = 256;\n  const SUPPORT_STOP = 4096;\n  /* eslint-enable no-unused-vars */\n\n  // device info\n  this.domain = 'media_player';\n  this.data = data;\n  this.entity_id = data.entity_id;\n  this.uuid_base = data.entity_id;\n  this.supportedFeatures = data.attributes.supported_features;\n\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name;\n  } else {\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n  }\n\n  if ((this.supportedFeatures | SUPPORT_STOP) === this.supportedFeatures) {\n    this.onState = 'playing';\n    this.offState = 'idle';\n    this.onService = 'media_play';\n    this.offService = 'media_stop';\n  } else if ((this.supportedFeatures | SUPPORT_PAUSE) === this.supportedFeatures) {\n    this.onState = 'playing';\n    this.offState = 'paused';\n    this.onService = 'media_play';\n    this.offService = 'media_pause';\n  } else if ((this.supportedFeatures | SUPPORT_TURN_ON) === this.supportedFeatures &&\n             (this.supportedFeatures | SUPPORT_TURN_OFF) === this.supportedFeatures) {\n    this.onState = 'on';\n    this.offState = 'off';\n    this.onService = 'turn_on';\n    this.offService = 'turn_off';\n  }\n\n  this.client = client;\n  this.log = log;\n}\n\nHomeAssistantMediaPlayer.prototype = {\n  onEvent(oldState, newState) {\n    this.switchService.getCharacteristic(Characteristic.On)\n        .setValue(newState.state === this.onState, null, 'internal');\n  },\n  getPowerState(callback) {\n    this.log(`fetching power state for: ${this.name}`);\n\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        const powerState = data.state === this.onState;\n        callback(null, powerState);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setPowerState(powerOn, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    if (powerOn) {\n      this.log(`Setting power state on the '${this.name}' to on`);\n\n      this.client.callService(this.domain, this.onService, serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to on`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    } else {\n      this.log(`Setting power state on the '${this.name}' to off`);\n\n      this.client.callService(this.domain, this.offService, serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to off`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    }\n  },\n  getServices() {\n    this.switchService = new Service.Switch();\n    const informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, 'Media Player')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    this.switchService\n        .getCharacteristic(Characteristic.On)\n        .on('get', this.getPowerState.bind(this))\n        .on('set', this.setPowerState.bind(this));\n\n    return [informationService, this.switchService];\n  },\n\n};\n\nfunction HomeAssistantMediaPlayerPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantMediaPlayer;\n}\n\nmodule.exports = HomeAssistantMediaPlayerPlatform;\nmodule.exports.HomeAssistantMediaPlayer = HomeAssistantMediaPlayer;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/sensor.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nclass HomeAssistantSensor {\n  constructor(log, data, client, service, characteristic, transformData) {\n    // device info\n    this.data = data;\n    this.entity_id = data.entity_id;\n    this.uuid_base = data.entity_id;\n    if (data.attributes && data.attributes.friendly_name) {\n      this.name = data.attributes.friendly_name;\n    } else {\n      this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n    }\n\n    this.entity_type = data.entity_id.split('.')[0];\n\n    this.client = client;\n    this.log = log;\n\n    this.service = service;\n    this.characteristic = characteristic;\n    if (transformData) {\n      this.transformData = transformData;\n    }\n  }\n\n  transformData(data) {\n    return parseFloat(data.state);\n  }\n\n  onEvent(oldState, newState) {\n    if (this.service === Service.CarbonDioxideSensor) {\n      const transformed = this.transformData(newState);\n      this.sensorService.getCharacteristic(this.characteristic)\n          .setValue(transformed, null, 'internal');\n\n      const abnormal = Characteristic.CarbonDioxideDetected.CO2_LEVELS_ABNORMAL;\n      const normal = Characteristic.CarbonDioxideDetected.CO2_LEVELS_NORMAL;\n      const detected = (transformed > 1000 ? abnormal : normal);\n      this.sensorService.getCharacteristic(Characteristic.CarbonDioxideDetected)\n          .setValue(detected, null, 'internal');\n    } else {\n      this.sensorService.getCharacteristic(this.characteristic)\n          .setValue(this.transformData(newState), null, 'internal');\n    }\n  }\n\n  identify(callback) {\n    this.log(`identifying: ${this.name}`);\n    callback();\n  }\n\n  getState(callback) {\n    this.log(`fetching state for: ${this.name}`);\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        callback(null, this.transformData(data));\n      } else {\n        callback(communicationError);\n      }\n    });\n  }\n\n  getServices() {\n    this.sensorService = new this.service(); // eslint-disable-line new-cap\n    const informationService = new Service.AccessoryInformation();\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, 'Sensor')\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    this.sensorService\n        .getCharacteristic(this.characteristic)\n        .setProps({ minValue: -50 })\n        .on('get', this.getState.bind(this));\n\n    return [informationService, this.sensorService];\n  }\n}\n\nfunction HomeAssistantSensorFactory(log, data, client) {\n  if (!data.attributes) {\n    return null;\n  }\n  let service;\n  let characteristic;\n  let transformData;\n  if (data.attributes.unit_of_measurement === '°C' || data.attributes.unit_of_measurement === '°F') {\n    service = Service.TemperatureSensor;\n    characteristic = Characteristic.CurrentTemperature;\n    transformData = function transformData(dataToTransform) { // eslint-disable-line no-shadow\n      let value = parseFloat(dataToTransform.state);\n      // HomeKit only works with Celsius internally\n      if (dataToTransform.attributes.unit_of_measurement === '°F') {\n        value = (value - 32) / 1.8;\n      }\n      return value;\n    };\n  } else if (data.attributes.unit_of_measurement === '%' && (data.entity_id.includes('humidity') || data.attributes.homebridge_sensor_type === 'humidity')) {\n    service = Service.HumiditySensor;\n    characteristic = Characteristic.CurrentRelativeHumidity;\n  } else if (data.attributes.unit_of_measurement === 'lux') {\n    service = Service.LightSensor;\n    characteristic = Characteristic.CurrentAmbientLightLevel;\n    transformData = function transformData(dataToTransform) { // eslint-disable-line no-shadow\n      return Math.max(0.0001, parseFloat(dataToTransform.state));\n    };\n  } else if (data.attributes.unit_of_measurement === 'ppm' && (data.entity_id.includes('co2') || data.attributes.homebridge_sensor_type === 'co2')) {\n    service = Service.CarbonDioxideSensor;\n    characteristic = Characteristic.CarbonDioxideLevel;\n  } else {\n    return null;\n  }\n\n  return new HomeAssistantSensor(log, data, client, service, characteristic, transformData);\n}\n\nfunction HomeAssistantSensorPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantSensorFactory;\n}\n\nmodule.exports = HomeAssistantSensorPlatform;\n\nmodule.exports.HomeAssistantSensorFactory = HomeAssistantSensorFactory;\n","/home/travis/build/npmtest/node-npmtest-homebridge-homeassistant/node_modules/homebridge-homeassistant/accessories/switch.js":"'use strict';\n\nlet Service;\nlet Characteristic;\nlet communicationError;\n\nfunction HomeAssistantSwitch(log, data, client, type) {\n  // device info\n  this.domain = type || 'switch';\n  this.data = data;\n  this.entity_id = data.entity_id;\n  this.uuid_base = data.entity_id;\n  if (data.attributes && data.attributes.friendly_name) {\n    this.name = data.attributes.friendly_name;\n  } else {\n    this.name = data.entity_id.split('.').pop().replace(/_/g, ' ');\n  }\n\n  this.client = client;\n  this.log = log;\n}\n\nHomeAssistantSwitch.prototype = {\n  onEvent(oldState, newState) {\n    this.switchService.getCharacteristic(Characteristic.On)\n        .setValue(newState.state === 'on', null, 'internal');\n  },\n  getPowerState(callback) {\n    this.client.fetchState(this.entity_id, (data) => {\n      if (data) {\n        const powerState = data.state === 'on';\n        callback(null, powerState);\n      } else {\n        callback(communicationError);\n      }\n    });\n  },\n  setPowerState(powerOn, callback, context) {\n    if (context === 'internal') {\n      callback();\n      return;\n    }\n\n    const that = this;\n    const serviceData = {};\n    serviceData.entity_id = this.entity_id;\n\n    if (powerOn) {\n      this.log(`Setting power state on the '${this.name}' to on`);\n\n      this.client.callService(this.domain, 'turn_on', serviceData, (data) => {\n        if (this.domain === 'scene') {\n          this.switchService.getCharacteristic(Characteristic.On)\n              .setValue('off', null, 'internal');\n        }\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to on`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    } else {\n      this.log(`Setting power state on the '${this.name}' to off`);\n\n      this.client.callService(this.domain, 'turn_off', serviceData, (data) => {\n        if (data) {\n          that.log(`Successfully set power state on the '${that.name}' to off`);\n          callback();\n        } else {\n          callback(communicationError);\n        }\n      });\n    }\n  },\n  getServices() {\n    this.switchService = new Service.Switch();\n    const informationService = new Service.AccessoryInformation();\n    let model;\n\n    switch (this.domain) {\n      case 'scene':\n        model = 'Scene';\n        break;\n      case 'input_boolean':\n        model = 'Input boolean';\n        break;\n      default:\n        model = 'Switch';\n    }\n\n    informationService\n          .setCharacteristic(Characteristic.Manufacturer, 'Home Assistant')\n          .setCharacteristic(Characteristic.Model, model)\n          .setCharacteristic(Characteristic.SerialNumber, this.entity_id);\n\n    if (this.domain === 'switch' || this.domain === 'input_boolean') {\n      this.switchService\n          .getCharacteristic(Characteristic.On)\n          .on('get', this.getPowerState.bind(this))\n          .on('set', this.setPowerState.bind(this));\n    } else {\n      this.switchService\n          .getCharacteristic(Characteristic.On)\n          .on('set', this.setPowerState.bind(this));\n    }\n\n    return [informationService, this.switchService];\n  },\n\n};\n\nfunction HomeAssistantSwitchPlatform(oService, oCharacteristic, oCommunicationError) {\n  Service = oService;\n  Characteristic = oCharacteristic;\n  communicationError = oCommunicationError;\n\n  return HomeAssistantSwitch;\n}\n\nmodule.exports = HomeAssistantSwitchPlatform;\nmodule.exports.HomeAssistantSwitch = HomeAssistantSwitch;\n"}